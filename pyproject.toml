[build-system]
requires = ["hatchling", "uv-dynamic-versioning>=0.7.0"]
build-backend = "hatchling.build"

[project]
name = "virtualization-mcp"
version = "1.0.1b1"
description = "Professional VirtualBox management server with comprehensive VM operations, networking, storage, and security features"
readme = "README.md"
requires-python = ">=3.10,<4.0"
license = { text = "MIT" }
authors = [
    { name = "Sandra Schi", email = "sandra@sandraschi.dev" }
]
maintainers = [
    { name = "Sandra Schi", email = "sandra@sandraschi.dev" }
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Virtualization",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: OS Independent"
]
keywords = ["mcp", "virtualbox", "vm", "virtualization", "automation", "fastmcp", "hypervisor"]
dependencies = [
    "fastmcp>=2.12.2,<3.0.0",
    "python-dotenv>=0.19.0",
    "pywin32>=300; sys_platform == 'win32'",
    "pyvbox>=1.0.0",
    "psutil>=5.9.0",
    "pyyaml>=6.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0",
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "python-multipart>=0.0.5",
    "typing-extensions>=4.0.0; python_version < '3.10'",
    "prometheus_client>=0.19.0"
]

# Project URLs for PyPI
[project.urls]
Homepage = "https://github.com/sandraschi/virtualization-mcp"
"Bug Tracker" = "https://github.com/sandraschi/virtualization-mcp/issues"
Documentation = "https://github.com/sandraschi/virtualization-mcp/blob/main/README.md"
Repository = "https://github.com/sandraschi/virtualization-mcp"

# Development dependencies
[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.4",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.0.0",
    
    # Linting & Formatting
    "ruff>=0.1.6",
    "mypy>=1.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    
    # Type Checking
    "pyright>=1.1.390",
    "types-setuptools>=69.0.0",
    
    # Security
    "bandit>=1.7.0",
    "safety>=3.0.0",
    
    # Building & Publishing (CRITICAL!)
    "build>=1.0.0",
    "twine>=5.0.0",
    
    # Pre-commit
    "pre-commit>=3.6.0",
    
    # Optional Advanced Security
    "semgrep>=1.0.0"
]

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]
addopts = "-v -s --cov=src/virtualization_mcp --cov-report=term-missing --cov-report=xml"
testpaths = ["tests"]
asyncio_mode = "strict"

[tool.ruff]
line-length = 100
target-version = "py310"
extend-exclude = ["migrations", "mcpb", "dist", "htmlcov"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "uv.*",
    "mcp.*",
    "watchfiles.*",
    "rich.*",
    "typer.*",
    "loguru.*",
    "pydantic.*",
    "sqlalchemy.*",
    "aiosqlite.*",
    "markdown_it.*",
    "frontmatter.*",
    "unidecode.*",
    "dateparser.*",
    "pillow.*",
    "pybars3.*",
    "pyjwt.*",
    "dotenv.*",
    "pytest.*",
    "bandit.*",
    "safety.*",
    "semgrep.*",
]
ignore_missing_imports = true

[tool.coverage.run]
concurrency = ["thread"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Exclude specific modules that are difficult to test comprehensively
omit = [
    "*/external_auth_provider.py",  # External HTTP calls to OAuth providers
    "*/supabase_auth_provider.py",  # External HTTP calls to Supabase APIs
    "*/watch_service.py",           # File system watching - complex integration testing
    "*/background_sync.py",         # Background processes
    "*/cli/main.py",               # CLI entry point
    "*/services/migration_service.py", # Complex migration scenarios
]

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true
fallback-version = "0.0.0"

# Documentation dependencies
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0"
]

[project.scripts]
virtualization-mcp = "virtualization_mcp.all_tools_server:main"

# Package discovery
[tool.setuptools.packages.find]
where = ["src"]
include = ["virtualization_mcp*"]

# Tool configurations
[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88




